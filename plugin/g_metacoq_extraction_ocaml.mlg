(*i camlp4deps: "grammar/grammar.cma" i*)

DECLARE PLUGIN "coq-metacoq-extraction-ocaml.plugin"

{

open Names
open Pp
open Ltac_plugin
open Stdarg
open Pcoq.Prim
open Tacexpr
open Tacinterp
open Stdarg
open Tacarg
open Genredexpr

open Coq_metacoq_extraction_plugin.Metacoq_malfunction
open Coq_metacoq_extraction_plugin.G_metacoq_malfunction

type pipeline_config = Pipeline.malfunction_pipeline_config

let interp_prim = function
  | Global (module_, label) ->
    let module_ = Caml_bytestring.bytestring_of_caml_string module_ in
    let label = Caml_bytestring.bytestring_of_caml_string label in
    Malfunction.Global (module_, label)
  | Erased -> Malfunction.Erased
  | Primitive (symb, arity) ->
    let symbol = Caml_bytestring.bytestring_of_caml_string symb in
    let arity = Caml_nat.nat_of_caml_int arity in
    Malfunction.Primitive (symbol, arity)

let interp_prims prims = 
  List.map (fun (kn, p) -> (Kernames.string_of_kername kn, interp_prim p)) prims

let interp_pipeline_config c = 
  let { 
    erasure_config = 
      { enable_cofix_to_fix = enable_cofix_to_fix; 
        enable_typed_erasure = enable_typed_erasure; 
        enable_fast_remove_params = enable_fast_remove_params };
    prims = prims } = c in
  let erasure_config = 
    Erasure0.({ 
      enable_cofix_to_fix; enable_typed_erasure; enable_fast_remove_params;
      dearging_config = default_dearging_config })
  in
  Pipeline.{ 
    erasure_config;
    prims = interp_prims prims
  }

let compile_malfunction conf p = 
  let conf = interp_pipeline_config conf in
  Caml_bytestring.caml_string_of_bytestring (Pipeline.compile_malfunction_gen conf p)

let extract = extract compile_malfunction

}

VERNAC COMMAND EXTEND MetaCoq_Extraction CLASSIFIED AS QUERY
| [ "MetaCoq" "Extraction" "-help" ] -> {
  let usage = "MetaCoq (Bypass)? Extraction [term] [output_file]?" in
  Feedback.msg_notice (str usage)
  }
| [ "MetaCoq" "Extraction" extract_args_list(l) constr(c) string_opt(dest) ] -> {
    let env = Global.env () in
    let evm = Evd.from_env env in
    let loc = Constrexpr_ops.constr_loc c in
    let (c, _) = Constrintern.interp_constr env evm c in
    extract ?loc l env evm c dest
  }
END
