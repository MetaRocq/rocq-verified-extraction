(*i camlp4deps: "grammar/grammar.cma" i*)

DECLARE PLUGIN "coq_metacoq_extraction.plugin"

{

open Names
open Pp
open Ltac_plugin
open Stdarg
open Pcoq.Prim
open Tacexpr
open Tacinterp
open Stdarg
open Tacarg
open Genredexpr

open Metacoq_malfunction


}

VERNAC ARGUMENT EXTEND metaCoqRegister_extract_cnst 
| [ reference(gr) "erased" ] -> { (kername_of_qualid ~loc gr, Erased) }
| [ reference(gr) "=>" string(str) natural(arity) ] ->
  { extract_primitive (kername_of_qualid ~loc gr) str arity }
| [ reference(gr) "=>" string(str) ] -> { extract_constant (kername_of_qualid ~loc gr) str }
END

VERNAC COMMAND EXTEND MetaCoqExtract_Register CLASSIFIED AS SIDEFF
| [ "MetaCoq" "Extract" "Constants" "[" metaCoqRegister_extract_cnst_list_sep(prims, ",") "]" "Packages" "[" string_list_sep(packages, ",") "]" ] -> {
    register prims packages
  }
| [ "MetaCoq" "Extract" "Constants" "[" metaCoqRegister_extract_cnst_list_sep(prims, ",") "]" ] -> {
    register prims []
  }
END


ARGUMENT EXTEND extract_args
| [ "-unsafe" ] -> { Unsafe }
| [ "-time" ] -> { Time }
| [ "-typed" ] -> { Typed }
| [ "-bypass-qeds" ] -> { BypassQeds }
| [ "-fast" ] -> { Fast }
| [ "-compile-plugin" ] -> { ProgramType Plugin }
| [ "-compile-with-coq" ] -> { ProgramType (Standalone true) }
| [ "-compile" ] -> { ProgramType (Standalone false) }
| [ "-run" ] -> { Run }
| [ "-verbose" ] -> { Verbose }
| [ "-fmt" ] -> { Format }
| [ "-optimize" ] -> { Optimize }
END
